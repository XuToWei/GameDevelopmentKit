
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;

namespace ET
{
public partial class DTAIConfig : IDataTable
{
    private System.Collections.Generic.Dictionary<int, DRAIConfig> _dataMap;
    private System.Collections.Generic.List<DRAIConfig> _dataList;
    private readonly System.Func<Cysharp.Threading.Tasks.UniTask<ByteBuf>> _loadFunc;

    public DTAIConfig(System.Func<Cysharp.Threading.Tasks.UniTask<ByteBuf>> loadFunc)
    {
        _loadFunc = loadFunc;
    }

    public async Cysharp.Threading.Tasks.UniTask LoadAsync()
    {
        ByteBuf _buf = await _loadFunc();
        int n = _buf.ReadSize();
        if(_dataMap == null)
        {
            _dataMap = new System.Collections.Generic.Dictionary<int, DRAIConfig>(n);
            _dataList = new System.Collections.Generic.List<DRAIConfig>(n);
        }
        else
        {
            _dataMap.Clear();
            _dataList.Clear();
        }
        for(int i = n ; i > 0 ; --i)
        {
            DRAIConfig _v;
            _v = global::ET.DRAIConfig.DeserializeDRAIConfig(_buf);
            _dataList.Add(_v);
            _dataMap.Add(_v.Id, _v);
        }
        PostInit();
    }

    public System.Collections.Generic.Dictionary<int, DRAIConfig> DataMap => _dataMap;
    public System.Collections.Generic.List<DRAIConfig> DataList => _dataList;
    public DRAIConfig GetOrDefault(int key) => _dataMap.TryGetValue(key, out var v) ? v : default;
    public DRAIConfig Get(int key) => _dataMap[key];
    public DRAIConfig this[int key] => _dataMap[key];

    public void ResolveRef(Tables tables)
    {
        foreach(var _v in _dataList)
        {
            _v.ResolveRef(tables);
        }
        PostResolveRef();
    }


    partial void PostInit();
    partial void PostResolveRef();
}
}
